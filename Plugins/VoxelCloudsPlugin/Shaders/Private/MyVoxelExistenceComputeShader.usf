#pragma once
#include "/Engine/Public/Platform.ush"
#include "CloudTypes.usf"

//#include "/Engine/Private/Common.ush"

/*
uint3 VoxelGridSize;
float3 Offset;
float VoxelSize;
float TotalTime;
float CloudinessThreshold;
float NoiseScale;
*/
#include "ShaderParameters.usf"

RWStructuredBuffer<float> OutputBuffer;

// Thread group size: 8x8x8
[numthreads(8, 8, 8)]
void MainComputeShader(uint3 DispatchThreadId : SV_DispatchThreadID)
{
	uint Index = DispatchThreadId.x + DispatchThreadId.y * (VoxelGridSize.x + 1) + DispatchThreadId.z * (VoxelGridSize.x + 1) * (VoxelGridSize.y + 1);

	if (DispatchThreadId.x > VoxelGridSize.x ||
		DispatchThreadId.y > VoxelGridSize.y ||
		DispatchThreadId.z > VoxelGridSize.z)
	{
		return; // Don't write outside bounds
	}

	float3 NormalizedPosition = float3(DispatchThreadId) / float3(VoxelGridSize - int3(1, 1, 1));

	
	float Output;
	if(CloudinessThreshold == 0)
		Output = 0;
	else {

		float3 WorldPosition = (float3(DispatchThreadId.xyz) * VoxelSize) - Offset;
		float3 NoisePosition = WorldPosition / NoiseScale;
		float NoiseVal = NormalizedSimplexNoise4D(NoisePosition * 0.1, TotalTime * 0.01);
		float CloudVal = CumulusCloud(NoisePosition);

		float Mult = SmoothActivationCoefficientNorm(NormalizedPosition.z, .4);
		
		Output = CloudVal * Mult * BetterSmoothStep(NoiseVal, 1 - CloudinessThreshold, .5f);
	}
	
	OutputBuffer[Index] = Output;
}
