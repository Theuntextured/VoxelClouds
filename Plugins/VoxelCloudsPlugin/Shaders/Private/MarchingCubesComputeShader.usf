#pragma once
#include "/Engine/Public/Platform.ush"
#include "ShaderParameters.usf"
#include "MarchingCubesLookups.usf"

#define INDEX_NONE -1

RWStructuredBuffer<float3> TriangleBuffer;
RWStructuredBuffer<float> VoxelData;

RWByteAddressBuffer CounterBuffer;

int PosToIndex(const uint x, const uint y, const uint z) {
	if(x <= VoxelGridSize.x && y <= VoxelGridSize.y && z <= VoxelGridSize.z) 
		return x + y * (VoxelGridSize.x + 1) + z * (VoxelGridSize.x + 1) * (VoxelGridSize.y + 1);
	return INDEX_NONE;
};
float3 GetPointPosition(const uint x, const uint y, const uint z) {
	return float3(x, y, z) * VoxelSize - Offset;
};
float GetMappedValueNormalizedClamped(float InputMin, float InputMax, float Value) {
	const float Divisor = InputMax - InputMin;
	if(abs(Divisor) < 0.00001f) {
		return (Value >= InputMax) ? 1 : 0;
	}
	return saturate((Value - InputMin) / Divisor);
};
float GetValueAtIndex(const int Index)
{
	if(Index == INDEX_NONE)
		return BorderValue;
	return VoxelData[Index];
};

[numthreads(8, 8, 8)]
void MainComputeShader(uint3 CurrentGridPosition : SV_DispatchThreadID) {
	if(CurrentGridPosition.x >= VoxelGridSize.x || CurrentGridPosition.y >= VoxelGridSize.y || CurrentGridPosition.z >= VoxelGridSize.z)
		return;
/*
	uint TriangleIndex;
	CounterBuffer.InterlockedAdd(0, 3, TriangleIndex);
			
	TriangleBuffer[TriangleIndex + 0] = float3(1,2,3);
	TriangleBuffer[TriangleIndex + 1] = float3(4,5,6);
	TriangleBuffer[TriangleIndex + 2] = float3(7,8,9);
	return;*/

	
	int OffsetIndices[8];
	for(int i = 0; i < 8; i++) {
		const uint3 NewPos = MarchingCubesOffsets[i] + CurrentGridPosition;
		OffsetIndices[i] = PosToIndex(NewPos.x, NewPos.y, NewPos.z);
	}
	//Calculate lookup index for triangles
	uint LookupIndex = 0;
	for(int i = 0; i < 8; i++)
		LookupIndex |= (GetValueAtIndex(OffsetIndices[i]) < CloudinessThreshold ? 1u : 0u) << i;

	uint CurrentIndex = 0;
	float3 VerticesToAdd[3];
	
	//Cycle through triangle points and calculate their actual 3d position
	for(int Edge, Index = 0; (Edge = TriangleTable[LookupIndex][Index]) != INDEX_NONE; Index++) {
		uint2 PointIndices = EdgeVertexIndices[Edge];

		uint3 GridPointA = MarchingCubesOffsets[PointIndices.x] + CurrentGridPosition;
		uint3 GridPointB = MarchingCubesOffsets[PointIndices.y] + CurrentGridPosition;

		float3 WorldPositionA = GetPointPosition(GridPointA.x, GridPointA.y, GridPointA.z);
		float3 WorldPositionB = GetPointPosition(GridPointB.x, GridPointB.y, GridPointB.z);

		float ValueA = GetValueAtIndex(PosToIndex(GridPointA.x, GridPointA.y, GridPointA.z));
		float ValueB = GetValueAtIndex(PosToIndex(GridPointB.x, GridPointB.y, GridPointB.z));

		float Alpha = GetMappedValueNormalizedClamped(ValueA, ValueB, CloudinessThreshold);

		Alpha = lerp(0.5f, Alpha, Roundedness);

		float3 VertexPosition = lerp(WorldPositionA, WorldPositionB, Alpha);
		VerticesToAdd[CurrentIndex++] = VertexPosition;
		
		if(CurrentIndex == 3) {
			CurrentIndex = 0;
			
			uint TriangleIndex;
			CounterBuffer.InterlockedAdd(0, 3, TriangleIndex);
			
			TriangleBuffer[TriangleIndex + 0] = VerticesToAdd[0];
			TriangleBuffer[TriangleIndex + 1] = VerticesToAdd[1];
			TriangleBuffer[TriangleIndex + 2] = VerticesToAdd[2];
		}
	}
}